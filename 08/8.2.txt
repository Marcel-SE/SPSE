import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

public class ExtensibleCalculatorTest {

	ExtensibleCalculatorIF c;
	
	@Before
	public void setUp() throws Exception {
		c = new ExtensibleCalculator();
	}

	@Test
	public void test() {
		c.addOperation("add", (x, y) -> (x + y));
		assertEquals(5, c.calc("add", 3, 2));
	}
	@Test
	public void test2() {
		c.addOperation("sub", (x, y) -> (x - y));
		assertEquals(1, c.calc("sub", 3, 2));
	}

}

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;

public class ExtensibleCalculator implements ExtensibleCalculatorIF {
	
	private Map<String,BiFunction<Integer,Integer,Integer>> operations = new HashMap<String,BiFunction<Integer,Integer,Integer>>();

	@Override
	public String[] operations() {
		ArrayList<String> ergebnis = new ArrayList<String>();
		for (Object o : operations.keySet()) {
			ergebnis.add((String)o);
		}
		return (String[])ergebnis.toArray();
	}

	@Override
	public void addOperation(String name, BiFunction<Integer,Integer,Integer> operation) {
		operations.put(name, operation);
	}

	@Override
	public int calc(String op, int x, int y) {
		return operations.get(op).apply(x, y);
	}

}
